{% for type in types.implementing.AutoMirror|!protocol|!annotated:"skipMirror" %}
{% if not type.supertype.implements.AutoMirror %}extension {{ type.name }}: CustomReflectable {}{% endif %}
{% endfor %}

{% for type in types.implementing.AutoMirror|!protocol|!annotated:"skipMirror" %}
// sourcery:inline:{{ type.name }}.Mirror
    //sourcery:skipJSExport
    public {% if type.supertype.implements.AutoMirror %}override {% endif %}var customMirror: Mirror {
{% if type.supertype.implements.AutoMirror %}
        var children = Array(super.customMirror.children)
{% for variable in type.variables|!annotated:"skipMirror" %}
        children.append((label: "{{ variable.name }}", value: {{ variable.name }}{% if variable.isOptional %} as Any{% endif %}))
{% endfor %}
{% if type.implements.Typed and not type.supertype.implements.Typed %}
        children.append((label: "isOptional", value: isOptional ? 1 : 0))
        children.append((label: "isImplicitlyUnwrappedOptional", value: isImplicitlyUnwrappedOptional ? 1 : 0))
        children.append((label: "unwrappedTypeName", value: unwrappedTypeName))
        children.append((label: "actualTypeName", value: actualTypeName as Any))
        children.append((label: "isTuple", value: isTuple ? 1 : 0))
        children.append((label: "isClosure", value: isClosure ? 1 : 0))
        children.append((label: "isArray", value: isArray ? 1 : 0))
        children.append((label: "isDictionary", value: isDictionary ? 1 : 0))
{% endif %}
        return Mirror(self, children: children)
{% else %}
        Mirror(self, children: [
{% for variable in type.variables|!annotated:"skipMirror" %}
            "{{ variable.name }}": {{ variable.name }}{% if variable.isOptional %} as Any{% endif %}{% if variable.typeName.name == "Bool" %} ? 1 : 0{% endif %},
{% endfor %}
{% if type.implements.Typed and not type.supertype.implements.Typed %}
            "isOptional": isOptional ? 1 : 0,
            "isImplicitlyUnwrappedOptional": isImplicitlyUnwrappedOptional ? 1 : 0,
            "unwrappedTypeName": unwrappedTypeName,
            "actualTypeName": actualTypeName as Any,
            "isTuple": isTuple ? 1 : 0,
            "isClosure": isClosure ? 1 : 0,
            "isArray": isArray ? 1 : 0,
            "isDictionary": isDictionary ? 1 : 0
{% endif %}
        ])
{% endif %}
    }
// sourcery:end
{% endfor %}
